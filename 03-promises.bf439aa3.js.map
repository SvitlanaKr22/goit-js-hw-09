{"mappings":"gfAMA,IAAAA,EAAAC,EAAA,SA+BA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAxCMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAIC,iBAKJ,IAJA,IAEqBC,EAAjBF,EAAIG,cADNC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGlBC,EAAI,EAAGA,EAAIC,OAAOF,EAAOG,OAAQF,IAAK,CAC7C,IAAMG,EAAcF,OAAOJ,EAAMK,OAASF,EAAIC,OAAOH,EAAKI,OACpDE,EAAgBH,OAAOF,EAAOG,OAASD,OAAOH,EAAKI,OACzDvB,EAAcqB,EAAI,EAAGG,GAClBE,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,MAAK,CAC9D6B,QAAON,EACTO,cAAc,G,IAGjBC,OAAM,SAAAN,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBJ,EAAA8B,OAAOM,QAAQ,sBAAqCJ,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,MAAK,CAC7D6B,QAASN,EACTO,cAAc,G","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(evt) {\n  evt.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  for (let i = 0; i < Number(amount.value); i++) {\n    const delayCreate = Number(delay.value) + i * Number(step.value);\n    const timeoutNotify = Number(amount.value) * Number(step.value);\n    createPromise(i + 1, delayCreate)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: timeoutNotify,\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: timeoutNotify,\n          clickToClose: true,\n        });\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","i","Number","value","delayCreate","timeoutNotify","then","param","Notify","success","concat","timeout","clickToClose","catch","failure"],"version":3,"file":"03-promises.bf439aa3.js.map"}