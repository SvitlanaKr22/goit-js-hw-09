{"mappings":"oeAMA,IAAAA,EAAAC,EAAA,SA+BA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAIC,iBACJ,MACEC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAIM,cAER,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOH,EAAOI,OAAQF,IAAK,CAC7C,MAAMG,EAAcF,OAAOL,EAAMM,OAASF,EAAIC,OAAOJ,EAAKK,OACpDE,EAAgBH,OAAOH,EAAOI,OAASD,OAAOJ,EAAKK,OACzDtB,EAAcoB,EAAI,EAAGG,GAClBE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAW,CAC5D0B,QAAOJ,EACTK,cAAc,GACd,IAEHC,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAOK,QAAQ,sBAAoB9B,QAAeC,MAAW,CAC3D0B,QAASJ,EACTK,cAAc,GACd,G","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів,\n// скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position), що створюється,\n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(evt) {\n  evt.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  for (let i = 0; i < Number(amount.value); i++) {\n    const delayCreate = Number(delay.value) + i * Number(step.value);\n    const timeoutNotify = Number(amount.value) * Number(step.value);\n    createPromise(i + 1, delayCreate)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          timeout: timeoutNotify,\n          clickToClose: true,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          timeout: timeoutNotify,\n          clickToClose: true,\n        });\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","elements","delay1","step","amount","currentTarget","i","Number","value","delayCreate","timeoutNotify","then","Notify","success","timeout","clickToClose","catch","failure"],"version":3,"file":"03-promises.46714bd0.js.map"}